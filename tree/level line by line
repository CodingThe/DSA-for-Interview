#include<bits/stdc++.h>
using namespace std;
struct node{
    int data;
    node* left;
    node* right;
    node(int x){
        data=x;
        left=NULL;
        right=NULL;
   }
};



void printlev(node* head){
  if(head==NULL){
      return;
  }
  queue<node*>q;                                
  q.push(head);                             //storing head on the queue 
  while(q.empty()==false){                  // traversing till queue become empty
      int x=q.size();                       //taking size of current queue
      for(int i=0;i<x;i++){                 //traversing tree for each node in queue till our current level size reached
        node* curr=q.front();               //taking front most element from the queue
          q.pop();                          //removing that node from the queue
      cout<<curr->data<<" ";                //printing the current removed node's element   
      if(curr->left!=NULL){                 //if curr node's left in tree is not null then will store it in queue
          q.push(curr->left);               
      }
      if(curr->right!=NULL){                 //if curr node's right in tree is not null then will store it in queue
          q.push(curr->right);
      }  
      }
      cout<<endl;                           //ending up current line after each level nodes got travered
  }
}


void printleftineachrow(node* head){
  if(head==NULL){
      return;
  }
  queue<node*>q;                                
  q.push(head);                             //storing head on the queue 
  while(q.empty()==false){                  // traversing till queue become empty
      int x=q.size();                       //taking size of current queue
      for(int i=0;i<x;i++){                 //traversing tree for each node in queue till our current level size reached
        node* curr=q.front();               //taking front most element from the queue
          q.pop();                          //removing that node from the queue
      if(i==0) cout<<curr->data<<" ";       //(***Updation Point***)//printing the leftmost node's value in current level   
      if(curr->left!=NULL){                 //if curr node's left in tree is not null then will store it in queue
          q.push(curr->left);               
      }
      if(curr->right!=NULL){                 //if curr node's right in tree is not null then will store it in queue
          q.push(curr->right);
      }  
      }
      cout<<endl;                           //ending up current line after each level nodes got travered
  }
}



int main(){
     node* head=new node(100);
     head->left=new node(200);
     head->right=new node(300);
     head->left->left=new node(400);
     head->left->right=new node(500);
     head->right->right=new node(700);
    // cout<<"Printing the level orderdr traversal line by line"<<endl;
    // printlev(head);
    // cout<<endl;
    cout<<"Printing the left view of the tree "<<endl;
    printleftineachrow(head);


    return 0;
    
}
